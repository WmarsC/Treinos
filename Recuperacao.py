import random

class TreinoReabilitacao:
    def __init__(self, parte_corpo, local):
        self.parte_corpo = parte_corpo.lower()
        self.local = local.lower()

        # Base de exerc√≠cios por parte do corpo e local
        self.exercicios = {
            "ombro": {
                "casa": ["Eleva√ß√£o lateral com garrafa d'√°gua", "Rota√ß√£o externa com el√°stico", "Alongamento de ombro"],
                "livre": ["Flex√£o de bra√ßo modificada", "Remada com halteres leves", "Eleva√ß√£o frontal com halteres"],
                "equipamentos": ["Peck Deck leve", "Rota√ß√£o externa na polia", "Desenvolvimento m√°quina leve"]
            },
            "joelho": {
                "casa": ["Agachamento parcial", "Extens√£o de perna sentado", "Eleva√ß√£o de perna reta"],
                "livre": ["Leg press leve", "Agachamento com halteres leves", "Avan√ßo controlado"],
                "equipamentos": ["Cadeira extensora leve", "Cadeira flexora leve", "Leg curl m√°quina"]
            },
            "tornozelo": {
                "casa": ["Eleva√ß√£o de panturrilha", "Flex√£o plantar com el√°stico", "Movimentos circulares do tornozelo"],
                "livre": ["Saltos pequenos controlados", "Caminhada na ponta dos p√©s", "Pliometria leve"],
                "equipamentos": ["M√°quina de panturrilha", "Stepper leve", "Equil√≠brio na bosu"]
            },
            "quadril": {
                "casa": ["Eleva√ß√£o de quadril", "Abdu√ß√£o de quadril com el√°stico", "Alongamento de flexores"],
                "livre": ["Agachamento sum√¥ leve", "Passada lateral", "Stiff leve com halteres"],
                "equipamentos": ["Leg press amplo", "Cadeira abdutora", "Cadeira adutora"]
            },
            "costas": {
                "casa": ["Prancha frontal", "Superman", "Alongamento de gato-vaca"],
                "livre": ["Remada unilateral com halteres", "Hiperextens√£o no banco", "Ponte de gl√∫teo"],
                "equipamentos": ["Remada baixa m√°quina leve", "Pulldown frente leve", "Extens√£o lombar m√°quina"]
            },
            "punho": {
                "casa": ["Flex√£o e extens√£o com peso leve", "Rota√ß√£o de punho com el√°stico", "Apertos de bola de borracha"],
                "livre": ["Rosca inversa leve", "Flex√£o de punho com halteres", "Alongamento de punho"],
                "equipamentos": ["Extensor de punho m√°quina", "Flexor de punho m√°quina"]
            },
            "cotovelo": {
                "casa": ["Flex√£o e extens√£o com el√°stico", "Tr√≠ceps kickback leve", "Alongamento de cotovelo"],
                "livre": ["Rosca direta leve", "Tr√≠ceps franc√™s halteres leves"],
                "equipamentos": ["Rosca Scott m√°quina leve", "Tr√≠ceps polia baixa leve"]
            },
            "pesco√ßo": {
                "casa": ["Inclina√ß√£o lateral", "Flex√£o e extens√£o controlada", "Rota√ß√£o lenta do pesco√ßo"],
                "livre": ["Alongamento cervical com resist√™ncia leve", "Isometria do pesco√ßo"],
                "equipamentos": ["M√°quina de extens√£o cervical leve", "M√°quina de flex√£o cervical leve"]
            },
            "peito": {
                "casa": ["Flex√£o de bra√ßo contra a parede", "Flex√£o de joelhos", "Alongamento peitoral"],
                "livre": ["Supino com halteres leves", "Flex√£o inclinada", "Crucifixo leve"],
                "equipamentos": ["Supino m√°quina leve", "Peck Deck leve", "Crossover leve"]
            },
            "perna": {
                "casa": ["Agachamento parcial", "Afundo sem peso", "Eleva√ß√£o de panturrilha"],
                "livre": ["Agachamento com halteres leves", "Passada lateral", "Stiff leve"],
                "equipamentos": ["Leg press leve", "Cadeira extensora/flexora leve", "Gl√∫teo polia leve"]
            }
        }

        self.complementares = {
            "fortalecimento": ["Prancha 30s", "Isometria", "Alongamento din√¢mico leve", "Exerc√≠cios de resist√™ncia el√°stica"],
            "mobilidade": ["Rota√ß√£o de articula√ß√£o", "Alongamento suave", "Movimentos de amplitude controlada"],
            "estabilidade": ["Equil√≠brio em uma perna", "Exerc√≠cios proprioceptivos", "Bosu ou almofada inst√°vel"],
            "regenerativo": ["Respira√ß√£o profunda", "Caminhada leve", "Alongamento passivo"]
        }

    def gerar_treino(self):
        treino = []

        # Exerc√≠cios principais para a parte do corpo e local escolhidos
        if self.parte_corpo in self.exercicios and self.local in self.exercicios[self.parte_corpo]:
            principais = random.sample(self.exercicios[self.parte_corpo][self.local], k=min(3, len(self.exercicios[self.parte_corpo][self.local])))
            treino.extend([f"‚úÖ {ex}" for ex in principais])
        else:
            treino.append("‚ö†Ô∏è Exerc√≠cios gerais de reabilita√ß√£o: use movimentos suaves e alongamentos controlados")

        # Adiciona exerc√≠cios complementares
        for tipo, lista in self.complementares.items():
            treino.append(f"üí™ {tipo.capitalize()}: {random.choice(lista)}")

        return treino


# ---------------------- INTERATIVO ----------------------
def montar_treino_reabilitacao():
    print("=== PLANO DE TREINO DE REABILITA√á√ÉO / FORTALECIMENTO ===\n")

    # Sele√ß√£o da parte do corpo
    partes = ["ombro", "joelho", "tornozelo", "quadril", "costas", "punho", "cotovelo", "pesco√ßo", "peito", "perna"]
    print("Escolha a parte do corpo que precisa recuperar:")
    for i, parte in enumerate(partes, 1):
        print(f"  {i}. {parte.capitalize()}")
    escolha_parte = int(input("Digite o n√∫mero: "))
    parte_corpo = partes[escolha_parte - 1]

    # Sele√ß√£o do local
    locais = ["casa", "livre", "equipamentos"]
    print("\nEscolha onde voc√™ quer fazer o treino:")
    for i, local in enumerate(locais, 1):
        print(f"  {i}. {local.capitalize()}")
    escolha_local = int(input("Digite o n√∫mero: "))
    local = locais[escolha_local - 1]

    # Gerar treino
    rehab = TreinoReabilitacao(parte_corpo, local)
    treino = rehab.gerar_treino()

    # Exibir treino
    print(f"\n=== SEU TREINO DE REABILITA√á√ÉO PARA {parte_corpo.capitalize()} ({local.capitalize()}) ===")
    for linha in treino:
        print(f"  {linha}")


# ---------------------- EXECUTAR ----------------------
if __name__ == "__main__":
    montar_treino_reabilitacao()
